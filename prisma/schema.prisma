generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(60)
  email               String                @db.VarChar(60)
  document            String                @db.Char(11)
  gender              String                @db.Char(1)
  phone               String?               @db.Char(11)
  password            String                @db.VarChar(100)
  verified            Boolean               @default(false)
  isActive            Boolean               @default(true) @map("is_active")
  createdAt           DateTime              @default(now()) @map("created_at")
  senders             UserMessage[]         @relation("Senders")
  recipients          UserMessage[]         @relation("Recipients")
  userChatRecipient   UserChat[]            @relation("UserChatRecipient")
  userChatSender      UserChat[]            @relation("UserChatSender")
  userRentPlaces      RentPlace[]           @relation("UserRentPlaces")
  UserFavorites       UserFavorites[]       @relation("UserFavorites")
  RentPlaceComplaints RentPlaceComplaints[] @relation("RentPlaceComplaints")

  @@map("users")
}

model UserFavorites {
  userId      Int       @map("user_id")
  rentPlaceId Int       @map("rent_place_id")
  user        User      @relation(name: "UserFavorites", fields: [userId], references: [id])
  rentPlace   RentPlace @relation(name: "RentPlaceFavorites", fields: [rentPlaceId], references: [id])

  @@id([userId, rentPlaceId])
  @@map("user_favorites")
}

model UserMessage {
  id          Int      @id @default(autoincrement())
  message     String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  senderId    Int      @map("sender_id")
  recipientId Int      @map("recipient_id")
  sender      User     @relation(name: "Senders", fields: [senderId], references: [id])
  recipient   User     @relation(name: "Recipients", fields: [recipientId], references: [id])

  @@map("user_messages")
}

model RentPlace {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(60)
  description         String?               @db.VarChar(300)
  type                String                @db.VarChar(11)
  roomType            String                @db.VarChar(13)
  value               Decimal               @db.Decimal(10, 2)
  createdAt           DateTime              @default(now()) @map("created_at")
  userId              Int                   @map("user_id")
  addressId           Int                   @unique @map("address_id")
  user                User                  @relation(name: "UserRentPlaces", fields: [userId], references: [id])
  address             Address               @relation(fields: [addressId], references: [id], onDelete: Cascade)
  specifications      Specification[]       @relation("RentPlaceSpecifications")
  rentPlacePhotos     RentPlacePhotos[]     @relation("RentPlacePhotos")
  UserFavorites       UserFavorites[]       @relation("RentPlaceFavorites")
  RentPlaceComplaints RentPlaceComplaints[] @relation("RentPlaceComplaints")

  @@map("rent_places")
}

model RentPlaceComplaints {
  id          Int       @id @default(autoincrement())
  type        String    @db.VarChar(30)
  description String    @db.VarChar(300)
  userId      Int       @map("user_id")
  rentPlaceId Int       @map("rent_place_id")
  user        User      @relation(name: "RentPlaceComplaints", fields: [userId], references: [id])
  rentPlace   RentPlace @relation(name: "RentPlaceComplaints", fields: [rentPlaceId], references: [id], onDelete: Cascade)

  @@map("rent_place_complaints")
}

model RentPlacePhotos {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(60)
  url         String?   @db.VarChar(255)
  rentPlaceId Int       @map("rent_place_id")
  rentPlace   RentPlace @relation(name: "RentPlacePhotos", fields: [rentPlaceId], references: [id], onDelete: Cascade)

  @@map("rent_place_photos")
}

model Specification {
  description String    @db.VarChar(300)
  amount      Int
  rentPlaceId Int       @map("rent_place_id")
  rentPlace   RentPlace @relation(name: "RentPlaceSpecifications", fields: [rentPlaceId], references: [id], onDelete: Cascade)

  @@id([description, rentPlaceId])
  @@map("specifications")
}

model Address {
  id           Int        @id @default(autoincrement())
  streetName   String     @map("street_name") @db.VarChar(60)
  buildingCode String     @map("building_code") @db.VarChar(10)
  complement   String?    @db.VarChar(45)
  neighborhood String     @db.VarChar(60)
  city         String     @db.VarChar(60)
  state        String     @db.VarChar(2)
  zipCode      String     @map("zip_code") @db.Char(8)
  rentPlace    RentPlace?

  @@map("addresses")
}

view UserChat {
  senderId          Int
  recipientId       Int
  lastMessage       String
  sentDate          DateTime
  userChatSender    User     @relation(name: "UserChatSender", fields: [senderId], references: [id])
  userChatRecipient User     @relation(name: "UserChatRecipient", fields: [recipientId], references: [id])

  @@id([senderId, recipientId])
  @@map("user_chats")
}
